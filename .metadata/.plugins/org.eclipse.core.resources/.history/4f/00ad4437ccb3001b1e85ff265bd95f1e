package dusan.rajkovic.mapper;

import dusan.rajkovic.dto.ExamDto;
import dusan.rajkovic.dto.ExamRegistrationDto;
import dusan.rajkovic.dto.StudentDto;
import dusan.rajkovic.entity.ExamEntity;
import dusan.rajkovic.entity.ExamRegistrationEntity;
import dusan.rajkovic.entity.StudentEntity;
import javax.annotation.Generated;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    comments = "version: 1.4.2.Final, compiler: Eclipse JDT (IDE) 3.24.0.v20201123-0742, environment: Java 15.0.1 (Oracle Corporation)"
)
public class ExamRegistrationMapperImpl implements ExamRegistrationMapper {

    @Override
    public ExamRegistrationDto toExamRegistrationDto(ExamRegistrationEntity examRegistration) {
        if ( examRegistration == null ) {
            return null;
        }

        ExamRegistrationDto examRegistrationDto = new ExamRegistrationDto();

        examRegistrationDto.setStudentDto( studentEntityToStudentDto( examRegistration.getStudent() ) );
        examRegistrationDto.setExamDto( examEntityToExamDto( examRegistration.getExam() ) );
        examRegistrationDto.setId( examRegistration.getId() );
        examRegistrationDto.setExamRegistrationTime( examRegistration.getExamRegistrationTime() );

        return examRegistrationDto;
    }

    @Override
    public ExamRegistrationEntity toExamRegistration(ExamRegistrationDto examRegistrationDto) {
        if ( examRegistrationDto == null ) {
            return null;
        }

        ExamRegistrationEntity examRegistrationEntity = new ExamRegistrationEntity();

        examRegistrationEntity.setStudent( studentDtoToStudentEntity( examRegistrationDto.getStudentDto() ) );
        examRegistrationEntity.setExam( examDtoToExamEntity( examRegistrationDto.getExamDto() ) );
        examRegistrationEntity.setId( examRegistrationDto.getId() );
        examRegistrationEntity.setExamRegistrationTime( examRegistrationDto.getExamRegistrationTime() );

        return examRegistrationEntity;
    }

    protected StudentDto studentEntityToStudentDto(StudentEntity studentEntity) {
        if ( studentEntity == null ) {
            return null;
        }

        StudentDto studentDto = new StudentDto();

        studentDto.setIndexNumber( studentEntity.getIndexNumber() );
        studentDto.setIndexYear( studentEntity.getIndexYear() );
        studentDto.setFirstName( studentEntity.getFirstName() );
        studentDto.setLastName( studentEntity.getLastName() );
        studentDto.setEmail( studentEntity.getEmail() );
        studentDto.setAdress( studentEntity.getAdress() );
        studentDto.setCurrentYearOfStudy( studentEntity.getCurrentYearOfStudy() );

        return studentDto;
    }

    protected ExamDto examEntityToExamDto(ExamEntity examEntity) {
        if ( examEntity == null ) {
            return null;
        }

        ExamDto examDto = new ExamDto();

        examDto.setId( examEntity.getId() );
        examDto.setExamDate( examEntity.getExamDate() );

        return examDto;
    }

    protected StudentEntity studentDtoToStudentEntity(StudentDto studentDto) {
        if ( studentDto == null ) {
            return null;
        }

        StudentEntity studentEntity = new StudentEntity();

        studentEntity.setIndexNumber( studentDto.getIndexNumber() );
        studentEntity.setIndexYear( studentDto.getIndexYear() );
        studentEntity.setFirstName( studentDto.getFirstName() );
        studentEntity.setLastName( studentDto.getLastName() );
        studentEntity.setEmail( studentDto.getEmail() );
        studentEntity.setAdress( studentDto.getAdress() );
        studentEntity.setCurrentYearOfStudy( studentDto.getCurrentYearOfStudy() );

        return studentEntity;
    }

    protected ExamEntity examDtoToExamEntity(ExamDto examDto) {
        if ( examDto == null ) {
            return null;
        }

        ExamEntity examEntity = new ExamEntity();

        examEntity.setId( examDto.getId() );
        examEntity.setExamDate( examDto.getExamDate() );

        return examEntity;
    }
}
